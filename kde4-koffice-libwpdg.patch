--- cmake/modules/FindWPD.cmake.orig	2010-12-28 11:53:19.271867868 +0100
+++ cmake/modules/FindWPD.cmake	2010-12-28 11:57:22.209342685 +0100
@@ -20,11 +20,13 @@
 if(NOT WIN32)
   INCLUDE(FindPkgConfig)
   pkg_check_modules(WPD libwpd-0.8)
+  pkg_check_modules(WPD libwpd-0.9)
 endif(NOT WIN32)
 
   FIND_PATH(WPD_INCLUDE_DIR libwpd/libwpd.h
     ${WPD_INCLUDE_DIR}
     /usr/include/libwpd-0.8
+    /usr/include/libwpd-0.9
   )
 
 
--- filters/kword/wordperfect/import/wpimport.cc.orig	2010-12-28 12:55:58.824825310 +0100
+++ filters/kword/wordperfect/import/wpimport.cc	2010-12-28 14:55:39.637866594 +0100
@@ -29,10 +29,110 @@
 K_EXPORT_COMPONENT_FACTORY(libwpimport, WPImportFactory("kofficefilters"))
 
 #include <libwpd/libwpd.h>
+#if LIBWPD_VERSION_MINOR>8
+#include <libwpd-stream/libwpd-stream.h>
+#else
 #include <libwpd/WPXStream.h>
 #include <libwpd/WPXHLListenerImpl.h>
+#endif
 
 
+#if LIBWPD_VERSION_MINOR>8
+class WPXMemoryInputStream : public WPXInputStream
+{
+public:
+    WPXMemoryInputStream(unsigned char *data, unsigned long size);
+    virtual ~WPXMemoryInputStream();
+
+    virtual bool isOLEStream() {
+        return false;
+    }
+    virtual WPXInputStream * getDocumentOLEStream(const char *name) {
+        return NULL;
+    }
+
+    const virtual unsigned char *read(unsigned long numBytes, unsigned long &numBytesRead);
+    virtual int seek(long offset, WPX_SEEK_TYPE seekType);
+    virtual long tell();
+    virtual bool atEOS();
+
+private:
+    long m_offset;
+    size_t m_size;
+    unsigned char *m_data;
+};
+
+WPXMemoryInputStream::WPXMemoryInputStream(unsigned char *data, unsigned long size) :
+	WPXInputStream(),
+	m_offset(0),
+	m_size(size),
+	m_data(data)
+{
+}
+
+WPXMemoryInputStream::~WPXMemoryInputStream()
+{
+}
+
+const unsigned char * WPXMemoryInputStream::read(unsigned long numBytes, unsigned long &numBytesRead)
+{
+	numBytesRead = 0;
+
+	if (numBytes == 0)
+		return 0;
+	
+	int numBytesToRead;
+
+	if ((m_offset+numBytes) < m_size)
+		numBytesToRead = numBytes;
+	else
+		numBytesToRead = m_size - m_offset;
+	
+	numBytesRead = numBytesToRead; // about as paranoid as we can be..
+
+	if (numBytesToRead == 0)
+		return 0;
+
+	long oldOffset = m_offset;
+	m_offset += numBytesToRead;
+	
+	return &m_data[oldOffset];
+}
+
+int WPXMemoryInputStream::seek(long offset, WPX_SEEK_TYPE seekType)
+{
+	if (seekType == WPX_SEEK_CUR)
+		m_offset += offset;
+	else if (seekType == WPX_SEEK_SET)
+		m_offset = offset;
+
+	if (m_offset < 0)
+	{
+		m_offset = 0;
+		return 1;
+	}
+	if ((long)m_offset > (long)m_size)
+	{
+		m_offset = m_size;
+		return 1;
+	}
+
+	return 0;
+}
+
+long WPXMemoryInputStream::tell()
+{
+	return m_offset;
+}
+
+bool WPXMemoryInputStream::atEOS()
+{
+	if ((long)m_offset == (long)m_size) 
+		return true; 
+
+	return false;
+}
+#else
 class WPXMemoryInputStream : public WPXInputStream
 {
 public:
@@ -125,13 +225,70 @@
 
     return false;
 }
+#endif
 
-
+#if LIBWPD_VERSION_MINOR>8
+class KWordListener : public WPXDocumentInterface
+#else
 class KWordListener : public WPXHLListenerImpl
+#endif
 {
 public:
     KWordListener();
     virtual ~KWordListener();
+#if LIBWPD_VERSION_MINOR>8
+	virtual void setDocumentMetaData(const WPXPropertyList &propList) {};
+	virtual void startDocument();
+	virtual void endDocument();
+	virtual void definePageStyle(const WPXPropertyList &propList) {};
+	virtual void openPageSpan(const WPXPropertyList &propList) {};
+	virtual void closePageSpan() {};
+	virtual void openHeader(const WPXPropertyList &propList) {};
+	virtual void closeHeader() {};
+	virtual void openFooter(const WPXPropertyList &propList) {};
+	virtual void closeFooter() {};
+	virtual void defineParagraphStyle(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops) {};
+	virtual void openParagraph(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops);
+	virtual void closeParagraph();
+	virtual void defineCharacterStyle(const WPXPropertyList &propList) {};
+	virtual void openSpan(const WPXPropertyList &propList);
+	virtual void closeSpan();
+	virtual void defineSectionStyle(const WPXPropertyList &propList, const WPXPropertyListVector &columns) {};
+	virtual void openSection(const WPXPropertyList &propList, const WPXPropertyListVector &columns) {};
+	virtual void closeSection() {};
+	virtual void insertTab();
+	virtual void insertSpace() {};
+	virtual void insertText(const WPXString &text);
+ 	virtual void insertLineBreak();
+	virtual void insertField(const WPXString &type, const WPXPropertyList &propList) {};
+	virtual void defineOrderedListLevel(const WPXPropertyList &propList) {};
+	virtual void defineUnorderedListLevel(const WPXPropertyList &propList) {};	
+	virtual void openOrderedListLevel(const WPXPropertyList &propList) {};
+	virtual void openUnorderedListLevel(const WPXPropertyList &propList) {};
+	virtual void closeOrderedListLevel() {};
+	virtual void closeUnorderedListLevel() {};
+	virtual void openListElement(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops) {};
+	virtual void closeListElement() {};       
+	virtual void openFootnote(const WPXPropertyList &propList) {};
+	virtual void closeFootnote() {};
+	virtual void openEndnote(const WPXPropertyList &propList) {};
+	virtual void closeEndnote() {};
+	virtual void openComment(const WPXPropertyList &propList) {};
+	virtual void closeComment() {};
+	virtual void openTextBox(const WPXPropertyList &propList) {};
+	virtual void closeTextBox() {};
+ 	virtual void openTable(const WPXPropertyList &propList, const WPXPropertyListVector &columns) {};
+ 	virtual void openTableRow(const WPXPropertyList &propList) {};
+	virtual void closeTableRow() {};
+ 	virtual void openTableCell(const WPXPropertyList &propList) {};
+	virtual void closeTableCell() {};
+	virtual void insertCoveredTableCell(const WPXPropertyList &propList) {};
+ 	virtual void closeTable() {};
+	virtual void openFrame(const WPXPropertyList &propList) {};
+	virtual void closeFrame() {};
+	virtual void insertBinaryObject(const WPXPropertyList &propList, const WPXBinaryData &data) {};
+	virtual void insertEquation(const WPXPropertyList &propList, const WPXString &data) {};
+#else
 
     virtual void setDocumentMetaData(const WPXPropertyList &propList) {}
 
@@ -177,6 +334,7 @@
     virtual void closeTableCell() {}
     virtual void insertCoveredTableCell(const WPXPropertyList &propList) {}
     virtual void closeTable() {}
+#endif
 
     QString root;
 
@@ -288,7 +446,11 @@
 
     // open and parse the file
     KWordListener listener;
+#if LIBWPD_VERSION_MINOR>8
+    WPDResult error = WPDocument::parse(instream, static_cast<WPXDocumentInterface *>(&listener), NULL);
+#else
     WPDResult error = WPDocument::parse(instream, static_cast<WPXHLListenerImpl *>(&listener));
+#endif
     delete instream;
 
     if (error != WPD_OK)
--- filters/karbon/wpg/import/WPGImport.cpp.orig	2010-12-28 19:07:46.955718206 +0100
+++ filters/karbon/wpg/import/WPGImport.cpp	2010-12-28 19:54:03.310246629 +0100
@@ -33,7 +33,11 @@
 #include <KoXmlWriter.h>
 
 #include <libwpg/libwpg.h>
+#if LIBWPG_VERSION_MINOR<2
 #include <libwpg/WPGStreamImplementation.h>
+#else
+#include <libwpd-stream/libwpd-stream.h>
+#endif
 
 #include "FileOutputHandler.hxx"
 #include "OdgExporter.hxx"
@@ -83,7 +87,7 @@
     if (to != "application/vnd.oasis.opendocument.graphics")
         return KoFilter::NotImplemented;
 
-
+#if LIBWPG_VERSION_MINOR<2
     WPXInputStream* input = new libwpg::WPGFileStream(m_chain->inputFile().toLocal8Bit());
     if (input->isOLEStream()) {
         WPXInputStream* olestream = input->getDocumentOLEStream();
@@ -92,6 +96,16 @@
             input = olestream;
         }
     }
+#else
+    WPXInputStream* input = new WPXFileStream(m_chain->inputFile().toLocal8Bit());
+    if (input->isOLEStream()) {
+        WPXInputStream* olestream = input->getDocumentOLEStream("Anything");
+        if (olestream) {
+            delete input;
+            input = olestream;
+        }
+     }
+#endif
 
     if (!libwpg::WPGraphics::isSupported(input)) {
         std::cerr << "ERROR: Unsupported file format (unsupported version) or file is encrypted!" << std::endl;
--- filters/karbon/wpg/import/OdgExporter.hxx.orig	2010-12-28 19:12:45.376108487 +0100
+++ filters/karbon/wpg/import/OdgExporter.hxx	2010-12-28 20:02:57.902052785 +0100
@@ -39,6 +39,7 @@
 			     const bool isFlatXML = false);
 	~OdgExporter();
 
+#if LIBWPG_VERSION_MINOR<2
 	void startGraphics(double imageWidth, double imageHeight);
 	void endGraphics();
 	void startLayer(unsigned int id);
@@ -72,6 +73,44 @@
 	std::ostringstream m_value, m_name;
 	double m_width, m_height;
 	const bool m_isFlatXML;
+#else
+	virtual void startGraphics(const ::WPXPropertyList &propList);
+	virtual void endGraphics();
+	virtual void setStyle(const ::WPXPropertyList &propList, const ::WPXPropertyListVector &gradient);
+	virtual void startLayer(const ::WPXPropertyList &propList);
+	virtual void endLayer();
+	virtual void drawRectangle(const ::WPXPropertyList& propList);
+	virtual void drawEllipse(const ::WPXPropertyList& propList);
+	virtual void drawPolygon(const ::WPXPropertyListVector &vertices);
+	virtual void drawPath(const ::WPXPropertyListVector &path);
+	virtual void drawGraphicObject(const ::WPXPropertyList &propList, const ::WPXBinaryData &binaryData);
+	virtual void startEmbeddedGraphics(const ::WPXPropertyList &propList);
+	virtual void endEmbeddedGraphics();
+	virtual void drawPolyline(const ::WPXPropertyListVector &vertices);
+	virtual void startTextObject(const ::WPXPropertyList &propList, const ::WPXPropertyListVector &path);
+	virtual void endTextObject();
+	virtual void startTextLine(const ::WPXPropertyList &propList);
+	virtual void endTextLine();
+	virtual void startTextSpan(const ::WPXPropertyList &propList);
+	virtual void endTextSpan();
+	virtual void insertText(const ::WPXString &str);
+
+
+private:
+	std::vector <GraphicsElement *> mBodyElements;
+	std::vector <GraphicsElement *> mAutomaticStylesElements;
+	std::vector <GraphicsElement *> mStrokeDashElements;
+	std::vector <GraphicsElement *> mGradientElements;
+	GraphicsHandler *mpHandler;
+
+	int m_gradientIndex;
+	int m_dashIndex;
+	int m_styleIndex;
+	void writeStyle();
+	std::ostringstream m_value, m_name;
+	double m_width, m_height;
+	const bool m_isFlatXML;
+#endif
 };
 
 #endif // __ODGEXPORTER_H__
